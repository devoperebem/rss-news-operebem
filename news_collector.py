#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sistema de Coleta e Exibi√ß√£o de Not√≠cias Financeiras via RSS
Autor: Sistema Automatizado
Data: 2025
"""

import sqlite3
import feedparser
import time
import argparse
from datetime import datetime, timedelta, timezone
from typing import List, Dict, Optional
import sys
import re
from html import unescape
from deep_translator import GoogleTranslator
from langdetect import detect, LangDetectException
import os

# Importar configura√ß√µes
try:
    from config import DB_NAME, REFRESH_INTERVAL, MAX_AGE_HOURS
except ImportError:
    # Fallback para desenvolvimento sem config.py
    DB_NAME = "noticias.db"
    REFRESH_INTERVAL = 30
    MAX_AGE_HOURS = 24


# ==================== CONFIGURA√á√ïES ====================

# Lista de feeds RSS financeiros
# Nota: URLs do Banco Central usam ano din√¢mico (atualizado automaticamente)
RSS_FEEDS = [
    {"url": "https://feeds.bloomberg.com/markets/news.rss", "fonte": "Bloomberg"},
    {"url": "https://feeds.content.dowjones.io/public/rss/RSSMarketsMain", "fonte": "The Wall Street Journal"},
    {"url": "https://finance.yahoo.com/news/rssindex", "fonte": "Yahoo Finance"},
    {"url": "https://br.investing.com/rss/news.rss", "fonte": "Investing.com BR"},
    {"url": "https://oilprice.com/rss/main", "fonte": "OilPrice"},
    {"url": "https://www.ft.com/rss/home/uk", "fonte": "Financial Times"},
    {"url": "https://www.cnbc.com/id/100003114/device/rss/rss.html", "fonte": "CNBC"},
    {"url": "https://www.infomoney.com.br/feed/", "fonte": "InfoMoney"},
    {"url": "https://www.moneytimes.com.br/feed/", "fonte": "Money Times"},
    # Banco Central do Brasil (ano din√¢mico)
    {"url": f"https://www.bcb.gov.br/api/feed/sitebcb/sitefeeds/noticias?ano={datetime.now().year}", "fonte": "Banco Central - Not√≠cias"},
    {"url": f"https://www.bcb.gov.br/api/feed/app/demaisnormativos/atosecomunicados?ano={datetime.now().year}", "fonte": "Banco Central - Comunicados"},
    {"url": f"https://www.bcb.gov.br/api/feed/sitebcb/sitefeeds/notasImprensa?ano={datetime.now().year}", "fonte": "Banco Central - Notas √† Imprensa"},
    # Criptomoedas
    {"url": "https://www.coindesk.com/arc/outboundfeeds/rss/", "fonte": "CoinDesk"},
]


# ==================== BANCO DE DADOS ====================

def criar_banco_dados():
    """
    Cria a estrutura do banco de dados SQLite se n√£o existir.
    Tabela: noticias (id, titulo, link, fonte, data_publicacao, descricao, data_coleta, titulo_pt, descricao_pt)
    """
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS noticias (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            titulo TEXT NOT NULL,
            link TEXT UNIQUE NOT NULL,
            fonte TEXT NOT NULL,
            data_publicacao TEXT,
            descricao TEXT,
            data_coleta TEXT NOT NULL,
            titulo_pt TEXT,
            descricao_pt TEXT
        )
    """)
    
    # Criar √≠ndice para melhorar performance nas buscas
    cursor.execute("""
        CREATE INDEX IF NOT EXISTS idx_link ON noticias(link)
    """)
    
    cursor.execute("""
        CREATE INDEX IF NOT EXISTS idx_data_publicacao ON noticias(data_publicacao)
    """)
    
    conn.commit()
    conn.close()
    print(f"‚úì Banco de dados '{DB_NAME}' inicializado com sucesso.")


def limpar_noticias_antigas():
    """
    Remove not√≠cias com mais de 24 horas do banco de dados.
    Usa a data de COLETA (n√£o publica√ß√£o) para determinar quais not√≠cias remover.
    Isso evita problemas com feeds RSS que t√™m datas incorretas.
    """
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    # Calcular timestamp de 24 horas atr√°s em UTC
    limite_tempo = datetime.now(timezone.utc) - timedelta(hours=MAX_AGE_HOURS)
    limite_str = limite_tempo.isoformat()
    
    # Deletar not√≠cias antigas baseado na data de COLETA
    cursor.execute("""
        DELETE FROM noticias 
        WHERE data_coleta < ? OR data_coleta IS NULL
    """, (limite_str,))
    
    deletadas = cursor.rowcount
    conn.commit()
    conn.close()
    
    if deletadas > 0:
        print(f"üóëÔ∏è  {deletadas} not√≠cia(s) antiga(s) removida(s).")
    
    return deletadas


def inserir_noticia(titulo: str, link: str, fonte: str, data_pub: Optional[str], descricao: str) -> bool:
    """
    Insere uma not√≠cia no banco de dados se ela n√£o existir.
    Traduz t√≠tulo e descri√ß√£o automaticamente se n√£o estiverem em portugu√™s.
    Retorna True se inseriu, False se j√° existia.
    """
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    try:
        # Data de coleta em formato ISO com timezone UTC
        data_coleta = datetime.now(timezone.utc).isoformat()
        
        # Detectar idioma e traduzir apenas se necess√°rio
        titulo_pt = None
        descricao_pt = None
        
        idioma_titulo = detectar_idioma(titulo)
        if idioma_titulo and idioma_titulo != 'pt':
            titulo_pt = traduzir_texto(titulo)
        
        if descricao:
            idioma_desc = detectar_idioma(descricao)
            if idioma_desc and idioma_desc != 'pt':
                descricao_pt = traduzir_texto(descricao)
        
        cursor.execute("""
            INSERT INTO noticias (titulo, link, fonte, data_publicacao, descricao, data_coleta, titulo_pt, descricao_pt)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """, (titulo, link, fonte, data_pub, descricao, data_coleta, titulo_pt, descricao_pt))
        
        conn.commit()
        conn.close()
        return True
    except sqlite3.IntegrityError:
        # Link j√° existe no banco - DUPLICA√á√ÉO PREVENIDA
        conn.close()
        return False


def obter_todas_noticias() -> List[Dict]:
    """
    Retorna todas as not√≠cias do banco ordenadas da mais recente para a mais antiga.
    """
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT titulo, link, fonte, data_publicacao, descricao, data_coleta, titulo_pt, descricao_pt
        FROM noticias
        ORDER BY data_publicacao DESC
    """)
    
    noticias = []
    for row in cursor.fetchall():
        noticias.append({
            "titulo": row[0],
            "link": row[1],
            "fonte": row[2],
            "data_publicacao": row[3],
            "descricao": row[4],
            "data_coleta": row[5],
            "titulo_pt": row[6],
            "descricao_pt": row[7]
        })
    
    conn.close()
    return noticias


# ==================== LIMPEZA E TRADU√á√ÉO ====================

def limpar_html(texto: str) -> str:
    """
    Remove todas as tags HTML e limpa o texto.
    """
    if not texto:
        return ""
    
    # Decodificar entidades HTML
    texto = unescape(texto)
    
    # Remover tags HTML
    texto = re.sub(r'<[^>]+>', '', texto)
    
    # Remover m√∫ltiplos espa√ßos
    texto = re.sub(r'\s+', ' ', texto)
    
    # Limitar tamanho
    if len(texto) > 500:
        texto = texto[:497] + "..."
    
    return texto.strip()


def detectar_idioma(texto: str) -> Optional[str]:
    """
    Detecta o idioma do texto usando langdetect.
    Retorna c√≥digo do idioma (ex: 'pt', 'en') ou None se falhar.
    """
    if not texto or len(texto.strip()) < 10:
        return None
    
    try:
        idioma = detect(texto)
        return idioma
    except LangDetectException:
        return None


def traduzir_texto(texto: str, idioma_origem: str = 'auto') -> Optional[str]:
    """
    Traduz texto para portugu√™s usando Google Translator.
    Retorna a tradu√ß√£o ou None se houver erro.
    IMPORTANTE: S√≥ deve ser chamado se o texto N√ÉO estiver em portugu√™s.
    """
    if not texto or len(texto.strip()) < 3:
        return None
    
    try:
        translator = GoogleTranslator(source=idioma_origem, target='pt')
        traducao = translator.translate(texto)
        return traducao if traducao and traducao != texto else None
    except Exception as e:
        # Se falhar, retorna None (usar√° o original)
        print(f"‚ö†Ô∏è  Erro na tradu√ß√£o: {str(e)}")
        return None


# ==================== COLETA DE RSS ====================

def parsear_data(entry) -> Optional[str]:
    """
    Extrai e converte a data de publica√ß√£o do feed RSS para formato ISO com timezone UTC.
    """
    try:
        if hasattr(entry, 'published_parsed') and entry.published_parsed:
            # Converter para UTC timezone-aware datetime
            dt = datetime(*entry.published_parsed[:6], tzinfo=timezone.utc)
            return dt.isoformat()
        elif hasattr(entry, 'updated_parsed') and entry.updated_parsed:
            # Converter para UTC timezone-aware datetime
            dt = datetime(*entry.updated_parsed[:6], tzinfo=timezone.utc)
            return dt.isoformat()
    except Exception:
        pass
    
    # Se n√£o conseguir parsear, usar data atual em UTC
    return datetime.now(timezone.utc).isoformat()


def coletar_feed(feed_url: str, fonte: str) -> int:
    """
    Coleta not√≠cias de um feed RSS espec√≠fico.
    Retorna o n√∫mero de not√≠cias novas inseridas.
    """
    try:
        feed = feedparser.parse(feed_url)
        novas = 0
        
        for entry in feed.entries:
            titulo = entry.get('title', 'Sem t√≠tulo')
            link = entry.get('link', '')
            descricao = entry.get('summary', entry.get('description', ''))
            
            # Limpar HTML da descri√ß√£o
            descricao = limpar_html(descricao)
            
            data_pub = parsear_data(entry)
            
            # Tentar inserir no banco
            if link and inserir_noticia(titulo, link, fonte, data_pub, descricao):
                novas += 1
        
        return novas
    
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao coletar {fonte}: {str(e)}")
        return 0


def coletar_todos_feeds() -> int:
    """
    Coleta not√≠cias de todos os feeds RSS configurados.
    Retorna o total de not√≠cias novas coletadas.
    """
    print("\n" + "="*70)
    print("üîÑ INICIANDO COLETA DE NOT√çCIAS...")
    print("="*70)
    
    total_novas = 0
    
    for feed in RSS_FEEDS:
        print(f"üì° Coletando: {feed['fonte']}...", end=" ")
        sys.stdout.flush()
        
        novas = coletar_feed(feed['url'], feed['fonte'])
        total_novas += novas
        
        if novas > 0:
            print(f"‚úì {novas} nova(s)")
        else:
            print("‚úì Nenhuma nova")
    
    print(f"\n‚úÖ Coleta finalizada: {total_novas} not√≠cia(s) nova(s) no total.")
    
    # Limpar not√≠cias antigas ap√≥s coletar
    limpar_noticias_antigas()
    
    return total_novas


# ==================== EXIBI√á√ÉO ====================

def formatar_data(data_iso: str) -> str:
    """
    Formata a data ISO para exibi√ß√£o amig√°vel.
    """
    try:
        dt = datetime.fromisoformat(data_iso)
        return dt.strftime("%d/%m/%Y %H:%M")
    except Exception:
        return "Data desconhecida"


def exibir_noticias():
    """
    Exibe todas as not√≠cias do banco de forma formatada no terminal.
    """
    noticias = obter_todas_noticias()
    
    print("\n" + "="*70)
    print(f"üì∞ NOT√çCIAS FINANCEIRAS (√öltimas 24 horas)")
    print(f"üìä Total: {len(noticias)} not√≠cia(s)")
    print("="*70 + "\n")
    
    if not noticias:
        print("‚ÑπÔ∏è  Nenhuma not√≠cia dispon√≠vel no momento.\n")
        return
    
    for i, noticia in enumerate(noticias, 1):
        data_formatada = formatar_data(noticia['data_publicacao'])
        
        print(f"[{noticia['fonte']}] {data_formatada}")
        print(f"üìå {noticia['titulo']}")
        print(f"üîó {noticia['link']}")
        
        if noticia['descricao']:
            print(f"üí¨ {noticia['descricao']}")
        
        print("-" * 70)
        
        if i < len(noticias):
            print()  # Linha em branco entre not√≠cias
    
    print()


# ==================== MAIN ====================

def main():
    """
    Fun√ß√£o principal que gerencia o fluxo do programa.
    """
    parser = argparse.ArgumentParser(
        description="Sistema de Coleta e Exibi√ß√£o de Not√≠cias Financeiras via RSS"
    )
    parser.add_argument(
        '--refresh',
        action='store_true',
        help='Executa apenas uma coleta e exibi√ß√£o (sem loop cont√≠nuo)'
    )
    parser.add_argument(
        '--interval',
        type=int,
        default=REFRESH_INTERVAL,
        help=f'Intervalo entre coletas em segundos (padr√£o: {REFRESH_INTERVAL}s)'
    )
    
    args = parser.parse_args()
    
    # Inicializar banco de dados
    criar_banco_dados()
    
    if args.refresh:
        # Modo manual: uma coleta e exibi√ß√£o
        print("\nüîß Modo: Atualiza√ß√£o Manual")
        coletar_todos_feeds()
        exibir_noticias()
        print("‚úì Atualiza√ß√£o conclu√≠da.\n")
    else:
        # Modo cont√≠nuo: loop infinito
        print("\nüöÄ Modo: Coleta Cont√≠nua")
        print(f"‚è±Ô∏è  Intervalo: {args.interval} segundos")
        print("‚ö†Ô∏è  Pressione Ctrl+C para interromper\n")
        
        try:
            while True:
                coletar_todos_feeds()
                # N√£o exibir not√≠cias em produ√ß√£o (economiza CPU/mem√≥ria)
                if not os.getenv('RAILWAY_ENVIRONMENT'):
                    exibir_noticias()
                
                print(f"‚è≥ Aguardando {args.interval} segundos at√© a pr√≥xima coleta...")
                print("="*70 + "\n")
                
                time.sleep(args.interval)
        
        except KeyboardInterrupt:
            print("\n\n‚õî Programa interrompido pelo usu√°rio.")
            print("‚úì Encerrando de forma segura...\n")
            sys.exit(0)


if __name__ == "__main__":
    main()
